C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ALARM_CLOCK__OPTIMIZED_
OBJECT MODULE PLACED IN .\Objects\Alarm Clock (Optimized).obj
COMPILER INVOKED BY: C:\Users\sethg\AppData\Local\Keil_v5\C51\BIN\C51.EXE Alarm Clock (Optimized).c OPTIMIZE(8,SPEED) BR
                    -OWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Alarm Clock (Optimized).lst) TABS(2) OBJECT(.\Objects\Alarm Clock (Optimized).o
                    -bj)

line level    source

   1          #include <reg51.h>
   2          #include "delay.h"
   3          
   4          unsigned int lcd_port=2;      //Specify Port used for rs,en,datapins as global variable
   5          sbit en = P1^1;
   6          sbit rs = P1^0;     //Specify rs and en pins as global variable
   7          
   8          #include "LCD.h"
   9          
  10          sbit SCL = P3^0;
  11          sbit SDA = P3^1;
  12          
  13          #include "I2C.h"
  14          
  15          #define EEPROM_ID 0xA0     // EEPROM ID
  16          
  17          #include "EEPROM.h"
  18          
  19          #include "ds1307.h"
  20          
  21          sbit ModePIN = P1^3;
  22          sbit SetPIN = P1^4;
  23          sbit StatePIN = P1^5;
  24          sbit AlarmPIN = P1^7;
  25          
  26          unsigned int pressed = 0;
  27          
  28          unsigned int Mode = 0;
  29          unsigned int State = 0;
  30          
  31          unsigned char TriggerHH_24;
  32          unsigned char address1;
  33          unsigned char TriggerMM;
  34          unsigned char address2;
  35          unsigned char TriggerDurationHH;
  36          unsigned char address3;
  37          unsigned char TriggerDurationMM;
  38          unsigned char address4;
  39          
  40          /*Function for displaying Date and Time*/
  41          void display_TimeDate()
  42          {
  43   1        unsigned char sec,min,hour,format,day,month,year,weekday;
  44   1        unsigned char weekdays[]={'M','T','W','T','F','S','S'};
  45   1        
  46   1        /* Read the Time from RTC(ds1307) */
  47   1        ds1307_GetTime(&hour,&min,&sec,&format);
  48   1        
  49   1        /* Read the Date from RTC(ds1307) */
  50   1        ds1307_GetDate(&day,&month,&year,&weekday);
  51   1        
  52   1        lcd_clear();
  53   1        lcd_setcursor(0,0);
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 2   

  54   1          
  55   1        /* Display "time" on first line*/
  56   1        lcd_printstring("Time: ");
  57   1          
  58   1        /* Display "date" on Second line*/
  59   1        lcd_setcursor(1,0);
  60   1        lcd_printstring("Date: ");
  61   1        
  62   1        /* Display the time on firstline 7th position*/
  63   1        lcd_setcursor(0,6);
  64   1        /*Display hours*/
  65   1        lcd_printnumberXdigits(hour,2);
  66   1        lcd_printchar(':');
  67   1        /*Display mins*/
  68   1        lcd_printnumberXdigits(min,2);
  69   1        lcd_printchar(':');
  70   1        /*Display secs*/
  71   1        lcd_printnumberXdigits(sec,2);
  72   1        
  73   1        lcd_setcursor(0,15);
  74   1        if(format != '0')
  75   1        {
  76   2          lcd_printchar(format);      //Prints 'AM' or 'PM'
  77   2        }
  78   1        
  79   1        /* Display the Date on secondline 7th position*/
  80   1        lcd_setcursor(1,6);
  81   1        /*Display date*/
  82   1        lcd_printnumberXdigits(day,2);
  83   1        lcd_printchar('/');
  84   1        /*Display month*/
  85   1        lcd_printnumberXdigits(month,2);
  86   1        lcd_printchar('/');
  87   1        /*Display year*/
  88   1        lcd_printnumberXdigits(year,2);
  89   1        /*Display weekday*/
  90   1        lcd_printchar(' ');
  91   1        lcd_printchar(weekdays[weekday-1]);
  92   1      }
  93          
  94          /*Function for displaying State and Output*/
  95          void display_StateOutput()
  96          {
  97   1        lcd_clear();
  98   1          
  99   1        /* Display "State" on first line*/
 100   1        lcd_setcursor(0,0);
 101   1        lcd_printstring("State: ");
 102   1        if (State == 0)
 103   1        {
 104   2          lcd_printstring("Automatic");   //Automatic State
 105   2        }
 106   1        else
 107   1        {
 108   2          lcd_printstring("Manual");   //Manual State
 109   2        }
 110   1        
 111   1          
 112   1        /* Display "ON/OFF" on Second line*/
 113   1        lcd_setcursor(1,0);
 114   1        lcd_printstring("Output: ");
 115   1        if (AlarmPIN == 0)
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 3   

 116   1        {
 117   2          lcd_printstring("OFF");   //OFF State
 118   2        }
 119   1        else
 120   1        {
 121   2          lcd_printstring("ON");   //ON State
 122   2        }
 123   1      }
 124          
 125          /*Functions for MENU Navigation*/
 126          void checkModePINstate()
 127          {
 128   1        if (ModePIN == pressed) {
 129   2          if (Mode < 10) {
 130   3            Mode ++;
 131   3          }
 132   2          else
 133   2          {
 134   3            Mode = 0;
 135   3          }
 136   2      
 137   2          while (ModePIN == pressed)
 138   2          {
 139   3            //Do nothing
 140   3          }
 141   2        }
 142   1      }
 143          
 144          /*Functions for State Switching*/
 145          void checkStatePINstate()
 146          {
 147   1        if (StatePIN == pressed) {
 148   2          if (State < 2) {
 149   3            State ++;
 150   3          }
 151   2          else
 152   2          {
 153   3            State = 0;
 154   3          }
 155   2      
 156   2          while (StatePIN == pressed)
 157   2          {
 158   3            //Do nothing
 159   3          }
 160   2        }
 161   1      }
 162          
 163          /*Functions for setting Time Parameters*/
 164          void SetTimeHH()
 165          {
 166   1        unsigned char HH,MM,SS,format;
 167   1        
 168   1        ds1307_GetTime(&HH,&MM,&SS,&format);
 169   1        
 170   1        lcd_clear();   //Displaying on LCD Display
 171   1        lcd_setcursor(0, 0);
 172   1        lcd_printstring("Set Time (hrs)");
 173   1        lcd_setcursor(1, 0);
 174   1        lcd_printnumberXdigits(HH,2);
 175   1        lcd_printchar(' ');
 176   1        lcd_printchar(':');
 177   1        lcd_printchar(' ');
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 4   

 178   1        lcd_printnumberXdigits(MM,2);
 179   1        
 180   1        if(format != '0')
 181   1        {
 182   2          lcd_printstring(" ");
 183   2          lcd_printchar(format);
 184   2        }
 185   1        
 186   1      
 187   1        if(SetPIN == pressed) //If SetPINstate is pressed during Hour setting
 188   1        {
 189   2          if(format=='0')
 190   2          {
 191   3            if(HH < 23)
 192   3            {
 193   4              HH ++;
 194   4              ds1307_SetHour(HH,'0');     //Transition between 00:00 and 23:00
 195   4            }
 196   3            else
 197   3            {
 198   4              HH = 12;
 199   4              ds1307_SetHour(HH,'A');     //Transition from 23:00 to 12AM
 200   4            }
 201   3          }
 202   2          else if(format=='A')
 203   2          {
 204   3            
 205   3            if(HH == 12)
 206   3            {
 207   4              HH = 1;
 208   4              ds1307_SetHour(HH,'A');    //Transition from 12AM to 1AM
 209   4            }
 210   3            else if(HH < 11)
 211   3            {
 212   4              HH ++;
 213   4              ds1307_SetHour(HH,'A');    //Transition between 1AM to 11AM
 214   4            }
 215   3            else if(HH == 11)
 216   3            {
 217   4              HH = 12;
 218   4              ds1307_SetHour(HH,'P');    //Transition from 11AM to 12PM
 219   4            }
 220   3          }
 221   2          else if(format=='P')
 222   2          {
 223   3            if(HH == 12)
 224   3            {
 225   4              HH = 1;
 226   4              ds1307_SetHour(HH,'P');    //Transition from 12PM to 1PM
 227   4            }
 228   3            else if(HH < 11)
 229   3            {
 230   4              HH ++;
 231   4              ds1307_SetHour(HH,'P');    //Transition between 1PM to 11PM
 232   4            }
 233   3            else if(HH == 11)
 234   3            {
 235   4              HH = 0;
 236   4              ds1307_SetHour(HH,'0');    //Transition from 11PM to 00:00 midnight
 237   4            }
 238   3          }
 239   2      
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 5   

 240   2          while (SetPIN == pressed)
 241   2          {
 242   3            //Do nothing
 243   3          }
 244   2        }
 245   1        
 246   1      }
 247          
 248          void SetTimeMM()
 249          {
 250   1        unsigned char HH,MM,SS,format;
 251   1        ds1307_GetTime(&HH,&MM,&SS,&format);
 252   1        
 253   1        lcd_clear();   //Displaying on LCD Display
 254   1        lcd_setcursor(0, 0);
 255   1        lcd_printstring("Set Time (mins)");
 256   1        lcd_setcursor(1, 0);
 257   1        lcd_printnumberXdigits(HH,2);
 258   1        lcd_printchar(' ');
 259   1        lcd_printchar(':');
 260   1        lcd_printchar(' ');
 261   1        lcd_printnumberXdigits(MM,2);
 262   1        
 263   1        if(format != '0')
 264   1        {
 265   2          lcd_printstring(" ");
 266   2          lcd_printchar(format);
 267   2        }
 268   1        
 269   1        if(SetPIN == pressed) //If SetPINstate is pressed during Minutes setting
 270   1        {
 271   2          if(MM < 59)
 272   2          {
 273   3            MM ++;
 274   3          }
 275   2          else
 276   2          {
 277   3            MM = 0;
 278   3          }
 279   2          while (SetPIN == pressed)
 280   2          {
 281   3            //Do nothing
 282   3          }
 283   2        }
 284   1        
 285   1        ds1307_SetMin(MM);   //Update Mins in ds1307
 286   1      }
 287          
 288          /*Functions for setting Date Parameters*/
 289          void SetDateDay()
 290          {
 291   1        unsigned char day,month,year,weekday;
 292   1        unsigned char weekdays[]={'M','T','W','T','F','S','S'};
 293   1        ds1307_GetDate(&day,&month,&year,&weekday);
 294   1        
 295   1        lcd_clear();   //Displaying on LCD Display
 296   1        lcd_setcursor(0, 0);
 297   1        lcd_printstring("Set Date (day)");
 298   1        lcd_setcursor(1, 0);
 299   1        lcd_printnumberXdigits(day,2);
 300   1        lcd_printchar(' ');
 301   1        lcd_printchar('/');
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 6   

 302   1        lcd_printchar(' ');
 303   1        lcd_printnumberXdigits(month,2);
 304   1        lcd_printchar(' ');
 305   1        lcd_printchar('/');
 306   1        lcd_printchar(' ');
 307   1        lcd_printnumberXdigits(year,2);
 308   1        lcd_printchar(' ');
 309   1        lcd_printchar(weekdays[weekday-1]);
 310   1        
 311   1        if(SetPIN == pressed) //If SetPINstate is pressed during Day setting
 312   1        {
 313   2          if(day < 31)
 314   2          {
 315   3            day ++;
 316   3          }
 317   2          else
 318   2          {
 319   3            day = 1;
 320   3          }
 321   2          while (SetPIN == pressed)
 322   2          {
 323   3            //Do nothing
 324   3          }
 325   2        }
 326   1        
 327   1        ds1307_SetDate(day, month, year, weekday);   //Update Date in ds1307
 328   1      }
 329          
 330          void SetDateMonth()
 331          {
 332   1        unsigned char day,month,year,weekday;
 333   1        unsigned char weekdays[]={'M','T','W','T','F','S','S'};
 334   1        ds1307_GetDate(&day,&month,&year,&weekday);
 335   1        
 336   1        lcd_clear();   //Displaying on LCD Display
 337   1        lcd_setcursor(0, 0);
 338   1        lcd_printstring("Set Date (month)");
 339   1        lcd_setcursor(1, 0);
 340   1        lcd_printnumberXdigits(day,2);
 341   1        lcd_printchar(' ');
 342   1        lcd_printchar('/');
 343   1        lcd_printchar(' ');
 344   1        lcd_printnumberXdigits(month,2);
 345   1        lcd_printchar(' ');
 346   1        lcd_printchar('/');
 347   1        lcd_printchar(' ');
 348   1        lcd_printnumberXdigits(year,2);
 349   1        lcd_printchar(' ');
 350   1        lcd_printchar(weekdays[weekday-1]);
 351   1        
 352   1        if(SetPIN == pressed) //If SetPINstate is pressed during Month setting
 353   1        {
 354   2          if(month < 12)
 355   2          {
 356   3            month ++;
 357   3          }
 358   2          else
 359   2          {
 360   3            month = 1;
 361   3          }
 362   2          while (SetPIN == pressed)
 363   2          {
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 7   

 364   3            //Do nothing
 365   3          }
 366   2        }
 367   1        
 368   1        ds1307_SetDate(day, month, year, weekday);   //Update Date in ds1307
 369   1      }
 370          
 371          void SetDateYear()
 372          {
 373   1        unsigned char day,month,year,weekday;
 374   1        unsigned char weekdays[]={'M','T','W','T','F','S','S'};
 375   1        ds1307_GetDate(&day,&month,&year,&weekday);
 376   1        
 377   1        lcd_clear();   //Displaying on LCD Display
 378   1        lcd_setcursor(0, 0);
 379   1        lcd_printstring("Set Date (year)");
 380   1        lcd_setcursor(1, 0);
 381   1        lcd_printnumberXdigits(day,2);
 382   1        lcd_printchar(' ');
 383   1        lcd_printchar('/');
 384   1        lcd_printchar(' ');
 385   1        lcd_printnumberXdigits(month,2);
 386   1        lcd_printchar(' ');
 387   1        lcd_printchar('/');
 388   1        lcd_printchar(' ');
 389   1        lcd_printnumberXdigits(year,2);
 390   1        lcd_printchar(' ');
 391   1        lcd_printchar(weekdays[weekday-1]);
 392   1        
 393   1        if(SetPIN == pressed) //If SetPINstate is pressed during Year setting
 394   1        {
 395   2          if(year < 99)
 396   2          {
 397   3            year ++;
 398   3          }
 399   2          else
 400   2          {
 401   3            year = 1;
 402   3          }
 403   2          while (SetPIN == pressed)
 404   2          {
 405   3            //Do nothing
 406   3          }
 407   2        }
 408   1        
 409   1        ds1307_SetDate(day, month, year, weekday);   //Update Date in ds1307
 410   1      }
 411          
 412          void SetDateWeekday()
 413          {
 414   1        unsigned char day,month,year,weekday;
 415   1        unsigned char weekdays[]={'M','T','W','T','F','S','S'};
 416   1        ds1307_GetDate(&day,&month,&year,&weekday);
 417   1        
 418   1        lcd_clear();   //Displaying on LCD Display
 419   1        lcd_setcursor(0, 0);
 420   1        lcd_printstring("Set Date (wkday)");
 421   1        lcd_setcursor(1, 0);
 422   1        lcd_printnumberXdigits(day,2);
 423   1        lcd_printchar(' ');
 424   1        lcd_printchar('/');
 425   1        lcd_printchar(' ');
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 8   

 426   1        lcd_printnumberXdigits(month,2);
 427   1        lcd_printchar(' ');
 428   1        lcd_printchar('/');
 429   1        lcd_printchar(' ');
 430   1        lcd_printnumberXdigits(year,2);
 431   1        lcd_printchar(' ');
 432   1        lcd_printchar(weekdays[weekday-1]);
 433   1        
 434   1        if(SetPIN == pressed) //If SetPINstate is pressed during Weekday setting
 435   1        {
 436   2          if(weekday < 7)
 437   2          {
 438   3            weekday ++;
 439   3          }
 440   2          else
 441   2          {
 442   3            weekday = 1;
 443   3          }
 444   2          while (SetPIN == pressed)
 445   2          {
 446   3            //Do nothing
 447   3          }
 448   2        }
 449   1        
 450   1        ds1307_SetDate(day, month, year, weekday);   //Update Date in ds1307
 451   1      }
 452          
 453          /*Functions for setting TriggerTime Parameters*/
 454          void SetTriggerTimeHH()
 455          {
 456   1        TriggerHH_24 = EEPROM_read(address1);
 457   1        TriggerMM = EEPROM_read(address2);
 458   1        
 459   1        //lcd_clear();   //Displaying on LCD Display
 460   1        //lcd_setcursor(0, 0);
 461   1        //lcd_printstring("Set ON Time (H)");
 462   1        //lcd_setcursor(1, 0);
 463   1        //lcd_printstring("Hours:");
 464   1        //lcd_printnumberXdigits(TriggerHH_24, 2);
 465   1        //lcd_setcursor(1, 9);
 466   1        //lcd_printstring("Mins:");
 467   1        //lcd_printnumberXdigits(TriggerMM, 2);
 468   1        
 469   1        lcd_clear();   //Displaying on LCD Display
 470   1        lcd_setcursor(0, 0);
 471   1        lcd_printstring("Set ON Time (H)");
 472   1        lcd_setcursor(1, 0);
 473   1        lcd_printnumberXdigits(TriggerHH_24,2);
 474   1        lcd_printchar(' ');
 475   1        lcd_printchar(':');
 476   1        lcd_printchar(' ');
 477   1        lcd_printnumberXdigits(TriggerMM,2);
 478   1        
 479   1        if(SetPIN == pressed) //If SetPIN is pressed during Hour setting
 480   1        {
 481   2          if(TriggerHH_24 < 23)
 482   2          {
 483   3            TriggerHH_24 ++;
 484   3          }
 485   2          else
 486   2          {
 487   3            TriggerHH_24 = 0;
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 9   

 488   3          }
 489   2          while (SetPIN == pressed)
 490   2          {
 491   3            //Do nothing
 492   3          }
 493   2        }
 494   1        EEPROM_write(address1, TriggerHH_24);
 495   1      }
 496          
 497          void SetTriggerTimeMM()
 498          {
 499   1        TriggerHH_24 = EEPROM_read(address1);
 500   1        TriggerMM = EEPROM_read(address2);
 501   1        
 502   1        lcd_clear();   //Displaying on LCD Display
 503   1        lcd_setcursor(0, 0);
 504   1        lcd_printstring("Set ON Time (m)");
 505   1        lcd_setcursor(1, 0);
 506   1        lcd_printnumberXdigits(TriggerHH_24,2);
 507   1        lcd_printchar(' ');
 508   1        lcd_printchar(':');
 509   1        lcd_printchar(' ');
 510   1        lcd_printnumberXdigits(TriggerMM,2);
 511   1        
 512   1        if(SetPIN == pressed) //If SetPIN is pressed during Hour setting
 513   1        {
 514   2          if(TriggerMM < 59)
 515   2          {
 516   3            TriggerMM ++;
 517   3          }
 518   2          else
 519   2          {
 520   3            TriggerMM = 0;
 521   3          }
 522   2          while (SetPIN == pressed)
 523   2          {
 524   3            //Do nothing
 525   3          }
 526   2        }
 527   1        EEPROM_write(address2, TriggerMM);
 528   1      }
 529          
 530          /*Functions for setting TriggerDuration Parameters*/
 531          void SetTriggerDurationHH()
 532          {
 533   1        TriggerDurationHH = EEPROM_read(address3);
 534   1        TriggerDurationMM = EEPROM_read(address4);
 535   1        
 536   1        //lcd_clear();   //Displaying on LCD Display
 537   1        //lcd_setcursor(0, 0);
 538   1        //lcd_printstring("Set ON Period(H)");
 539   1        //lcd_setcursor(1, 0);
 540   1        //lcd_printstring("Hours:");
 541   1        //lcd_printnumberXdigits(TriggerDurationHH, 2);
 542   1        //lcd_setcursor(1, 9);
 543   1        //lcd_printstring("Mins:");
 544   1        //lcd_printnumberXdigits(TriggerDurationMM, 2);
 545   1        
 546   1        lcd_clear();   //Displaying on LCD Display
 547   1        lcd_setcursor(0, 0);
 548   1        lcd_printstring("Set ON Period(H)");
 549   1        lcd_setcursor(1, 0);
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 10  

 550   1        lcd_printnumberXdigits(TriggerDurationHH,2);
 551   1        lcd_printchar(' ');
 552   1        lcd_printchar(':');
 553   1        lcd_printchar(' ');
 554   1        lcd_printnumberXdigits(TriggerDurationMM,2);
 555   1        
 556   1        if(SetPIN == pressed) //If SetPIN is pressed during Hour setting
 557   1        {
 558   2          if(TriggerDurationHH < 23)
 559   2          {
 560   3            TriggerDurationHH ++;
 561   3          }
 562   2          else
 563   2          {
 564   3            TriggerDurationHH = 0;
 565   3          }
 566   2          while (SetPIN == pressed)
 567   2          {
 568   3            //Do nothing
 569   3          }
 570   2        }
 571   1        EEPROM_write(address3, TriggerDurationHH);
 572   1      }
 573          
 574          void SetTriggerDurationMM()
 575          {
 576   1        TriggerDurationHH = EEPROM_read(address3);
 577   1        TriggerDurationMM = EEPROM_read(address4);
 578   1        
 579   1        lcd_clear();   //Displaying on LCD Display
 580   1        lcd_setcursor(0, 0);
 581   1        lcd_printstring("Set ON Period(m)");
 582   1        lcd_setcursor(1, 0);
 583   1        lcd_printnumberXdigits(TriggerDurationHH,2);
 584   1        lcd_printchar(' ');
 585   1        lcd_printchar(':');
 586   1        lcd_printchar(' ');
 587   1        lcd_printnumberXdigits(TriggerDurationMM,2);
 588   1        
 589   1        if(SetPIN == pressed) //If SetPIN is pressed during Hour setting
 590   1        {
 591   2          if(TriggerDurationMM < 59)
 592   2          {
 593   3            TriggerDurationMM ++;
 594   3          }
 595   2          else
 596   2          {
 597   3            TriggerDurationMM = 0;
 598   3          }
 599   2          while (SetPIN == pressed)
 600   2          {
 601   3            //Do nothing
 602   3          }
 603   2        }
 604   1        EEPROM_write(address4, TriggerDurationMM);
 605   1      }
 606          
 607          /*Function for Time Controlled Trigger*/
 608          void TimeControlledTrigger()
 609          {
 610   1        unsigned char currentHH;
 611   1        unsigned char currentMM;
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 11  

 612   1        unsigned char currentSS;
 613   1        unsigned char format;
 614   1        
 615   1        ds1307_GetTime(&currentHH, &currentMM, &currentSS, &format);      //Getting Current time details from RTC
 616   1        
 617   1        TriggerHH_24 = EEPROM_read(address1);
 618   1        TriggerMM = EEPROM_read(address2);
 619   1        TriggerDurationHH = EEPROM_read(address3);
 620   1        TriggerDurationMM = EEPROM_read(address4);
 621   1        
 622   1        if (((currentHH >= TriggerHH_24)&&(currentHH <= (TriggerHH_24+TriggerDurationHH))) && ((currentMM >= Tri
             -ggerMM)&&(currentMM <= (TriggerMM+TriggerDurationMM))))
 623   1        {
 624   2          AlarmPIN = 1;
 625   2        }
 626   1        else
 627   1        {
 628   2          AlarmPIN = 0;
 629   2        }
 630   1      }
 631          
 632          void main()
 633          {
 634   1        address1 = 0x00;                                   //EEPROM address for TriggerHH_24
 635   1        address2 = address1 + sizeof(TriggerHH_24);        //EEPROM address for TriggerMM
 636   1        address3 = address2 + sizeof(TriggerMM);           //EEPROM address for TriggerDurationHH
 637   1        address4 = address3 + sizeof(TriggerDurationHH);   //EEPROM address for TriggerDurationMM
 638   1        
 639   1        EEPROM_write(address1, 00);     //Initially storing TriggerHH as '00' into EEPROM
 640   1        EEPROM_write(address2, 01);     //Initially storing TriggerMM as '01' into EEPROM
 641   1        EEPROM_write(address3, 00);     //Initially storing TriggerDurationHH as '00' into EEPROM
 642   1        EEPROM_write(address4, 03);     //Initially storing TriggerDurationMM as '03' into EEPROM
 643   1        
 644   1        lcd_init();
 645   1        lcd_setcursor(0,0);
 646   1        lcd_printstring("8051 Project");
 647   1        lcd_setcursor(1,0);
 648   1        lcd_printstring("ALARM CLOCK");
 649   1        
 650   1        /* Initilize the RTC(ds1307)*/
 651   1        ds1307_Init();
 652   1       
 653   1        /*set the time and Date only once */
 654   1        ds1307_SetTime(23,59,30);  //Initially Setting time
 655   1        ds1307_SetDate(31,12,19,1);  //Initially Setting Date  
 656   1       
 657   1        delay(1000);
 658   1        
 659   1        //ds1307_GetTime(&HH,&MM,&SS);
 660   1        
 661   1        AlarmPIN = 0;   //Initially setting alarm OFF
 662   1          
 663   1        while(1)
 664   1        {
 665   2          checkModePINstate();     //MENU Navigation
 666   2          
 667   2          switch(Mode)
 668   2          {
 669   3            case 1:
 670   3              SetTimeHH();
 671   3              break;
 672   3            case 2:
C51 COMPILER V9.60.7.0   ALARM_CLOCK__OPTIMIZED_                                           02/13/2025 21:30:23 PAGE 12  

 673   3              SetTimeMM();
 674   3              break;
 675   3            case 3:
 676   3              SetDateDay();
 677   3              break;
 678   3            case 4:
 679   3              SetDateMonth();
 680   3              break;
 681   3            case 5:
 682   3              SetDateYear();
 683   3              break;
 684   3            case 6:
 685   3              SetDateWeekday();
 686   3              break;
 687   3            case 7:
 688   3              SetTriggerTimeHH();
 689   3              break;
 690   3            case 8:
 691   3              SetTriggerTimeMM();
 692   3              break;
 693   3            case 9:
 694   3              SetTriggerDurationHH();
 695   3              break;
 696   3            case 10:
 697   3              SetTriggerDurationMM();
 698   3              break;
 699   3            default:
 700   3              display_TimeDate();
 701   3              display_StateOutput();
 702   3              break;
 703   3          }
 704   2          
 705   2          checkStatePINstate();     //Automatic / Manual
 706   2          
 707   2          if (State == 0)
 708   2          {
 709   3            TimeControlledTrigger();   //Automatic State
 710   3          }
 711   2          else if (State == 1)
 712   2          {
 713   3            AlarmPIN = 0;   //Manual OFF State
 714   3          }
 715   2          else
 716   2          {
 717   3            AlarmPIN = 1;   //Manual ON State
 718   3          }
 719   2        
 720   2        }
 721   1      
 722   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4228    ----
   CONSTANT SIZE    =    309    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16     168
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
